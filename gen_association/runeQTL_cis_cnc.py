#!/usr/bin/env python


import h5py
import limix_legacy as limix
import limix_legacy.modules.varianceDecomposition as var
import limix_legacy.deprecated.stats.fdr as fdr


import pdb
import utilities.preprocess as prep

import scipy as sp
import scipy.stats as spst

import sys
import os

from qtl_data import storeQTL
from qtl_data import readChunkPickle
from qtl_data import getcisChunkhdf5
from qtl_data import getTSSpos
from qtl_data import getRandomChunkhdf5

import progressbar
import fnmatch
import gzip
import cPickle as pickle

import re

def loadPhen(fn_expression, myJob):
    """
    Get peer corrected gene expression
    fn_expression: hdf5 file
        -> peer_col_header gene names
        -> row_header sample ids
        -> peer15,peer30,peer35 peer corrected gene expression matrix
    myJob: current job index corresponding to gene myJob in per_col_header
    """
    PHEN   = h5py.File(fn_expression, 'r')
    gtid   = PHEN['peer_col_header'][:][myJob]
    gid    = PHEN['row_header'][:,1]
    restag = sp.sort([x for x in PHEN.keys() if not re.match('peer[0-9][0-9]', x) is None])[-1] ### prefer largest number peer factors
    Y      = PHEN[restag][:,myJob]
    PHEN.close()
    return gtid, Y, gid

def loadAnno(fn_anno_genes):
    """
    fn_anno_genes: h5py file with gencode 19 annotation (gencode.v19.annotation.hs37d5_chr.hdf5)
    md5sum: f5ca8b5c15cc9ee979eb2e3972fc09dd 
    """
    IN     = h5py.File(fn_anno_genes, 'r')
    chrm   = IN[gtid.split('.')[0]]['chr'][...]
    chrm   = int(str(chrm))
    pos    = IN[gtid.split('.')[0]]['pos'][:]
    pos[0] -= offset
    pos[1] += offset
    cispos = [chrm, pos[0], pos[1]]
    tsspos = getTSSpos(IN, gtid) 
    tsspos = [chrm, tsspos]
    strand = IN[gtid.split('.')[0]]['strand'][...]
    IN.close()
    return chrm, pos, cispos, tsspos, strand

def loadK(fn_kinship):
    """
    fn_kinship: File generated by preprocessing skript createKinship_hdf5.py
    """
    IN = h5py.File(fn_kinship,'r')
    K  = IN['K'][:]
    IN.close()
    return K

def loadIndex(fn_idx):
    """
    fn_idx: File generated by preprocessing skript createIndex mapping the 
    different id's onto each other and extracting meta information
    """
    IN       = h5py.File(fn_idx, 'r')
    midx_rna = IN['idx_rna'][:]
    midx_dna = IN['idx_dna'][:]
    rna_gtid = IN['rna_gtid'][:]
    dna_gtid = IN['dna_gtid'][:]
    cnc      = IN['cnc_type'][:]
    isicgc   = IN['isicgc'][:].astype('int')
    gender   = (IN['gender'][:]=='male').astype('int')
    tissue   = IN['tissue'][:]
    IN.close()
    return midx_rna, midx_dna, rna_gtid, dna_gtid,  cnc, isicgc, gender, tissue


def loadgenotypedata(fn_variants):
    VAR = h5py.File(fn_variants, 'r')
    X, pos, alleles, maf = getcisChunkhdf5(VAR, cispos , return_alleles = True, return_maf = True)
    VAR.close()
    return X, pos, alleles, maf

if __name__ == "__main__":
    #########################################
    ########## LOADING CONFIG ###############
    #########################################
    offset      = 1000000
    myJob       = int(sys.argv[1]) - 1    
    out_dir_tmp = sys.argv[2]
    fn_variants = sys.argv[3]
    fn_idx      = sys.argv[4]
    fn_kinship  = sys.argv[5]
    fn_expression = sys.argv[6]
    fn_anno_genes = sys.argv[7]
    ttype         = sys.argv[8]
    fn_cnv        = sys.argv[9] 
    fn_purity     = sys.argv[10] 

    #########################################
    ##### LOADING ALL NECESSARY DATA ########
    #########################################

    ### Load phenotype data 
    gtid, Y, gid = loadPhen(fn_expression, myJob)    
    ### load Annotation information
    chrm, pos, cispos, tsspos, strand = loadAnno(fn_anno_genes)
    ### Load K
    K = loadK(fn_kinship)
    ### load mapping indices  
    midx_rna, midx_dna, rna_gtid, dna_gtid, cnc, isicgc, gender, tissue = loadIndex(fn_idx)
    ### load purity covariates
    covariates = sp.loadtxt(fn_purity,delimiter = '\t', dtype = 'string')
    ### load genotype data
    X, pos, alleles, maf = loadgenotypedata(fn_variants)
    ### load copy number data
    CNV     = h5py.File(fn_cnv, 'r')
    icnv    = CNV['gene_name'][:] == gtid
    cnvdata = sp.array([], dtype = sp.float64).reshape(rna_gtid.shape[0],0) ### empty init
    if icnv.sum() == 1:
        cnvdata  = CNV['cnv'][icnv,:].ravel()
        cnvgid   = CNV['rna_aliquot_id'][:]
        midx_cnv = sp.in1d(cnvgid, rna_gtid)
        cnvgid   = cnvgid[midx_cnv]
        cnvdata  = cnvdata[midx_cnv]
        sidx_cnv = sp.array([sp.where(x==cnvgid)[0] for x in rna_gtid]).ravel()
        cnvgid   = cnvgid[sidx_cnv]
        cnvdata  = cnvdata[sidx_cnv]
        cnvdata[sp.isnan(cnvdata)] = 2
    CNV.close()


    # ###########################################
    # ##### Subsetting/Matching samples #########
    # ###########################################
    if ttype != 'ALL':
        midx_rna = midx_rna[tissue == ttype]
        midx_dna = midx_dna[tissue == ttype]
        cnc      = cnc[tissue == ttype]
        rna_gtid = rna_gtid[tissue == ttype]
        isicgc   = isicgc[tissue == ttype]
        gender   = gender[tissue == ttype]
        cnvdata  = cnvdata[tissue == ttype]


    K          = K[midx_dna,:][:,midx_dna]
    X          = sp.array(X[:,midx_dna].T)
    midx_rna   = sp.array([sp.where(x == gid)[0] for x in rna_gtid if x in gid]).ravel() ### overwrite sorting
    Y          = Y[midx_rna]
    gid        = gid[midx_rna]
    midx_cov   = sp.array([sp.where(x == covariates[:,1])[0] for x in gid if x in gid]).ravel()
    covariates = covariates[midx_cov,:]
    assert rna_gtid.shape[0] == gid.shape[0], 'Index file does not match phenotype file'
    assert (gid == rna_gtid).all(), 'Something mismatches'


    ### create some kernels
    K_cnc  = sp.array([x == cnc for x in sp.unique(cnc)]).astype('int') 
    isicgc = sp.column_stack((K_cnc.T, gender,cnvdata, covariates[:,11], sp.ones(isicgc.shape[0]))).astype('float')



    #############################################
    ### Fix Expression to standard normal #######
    #############################################
    Y = prep.standardizePheno(Y[:,sp.newaxis], trafo = 'rankStd')
    Y = Y.ravel()
    Y = prep.standardizePheno(Y[:,sp.newaxis], trafo = 'normStd')
    Y = Y.ravel()


    #############################################
    ####### Run linear mixed model assoc ########
    #############################################
    lm = limix.deprecated.CLMM()
    lm.setK(sp.array(K, order = 'C'))
    lm.setPheno(sp.array(Y, order = 'C'))
    lm.setCovs(isicgc)
    lm.setVarcompApprox0()
    lm.setTestStatistics(limix.deprecated.CLMM.TEST_LRT)
    lm.setSNPs(X) 
    lm.process()

    #############################################
    ####### Store results and background ########
    #############################################
    fn_out     = os.path.join(out_dir_tmp,'%s_resultfile_chunk_%i.hdf5' % (gtid,myJob))
    fn_out_tsv = os.path.join(out_dir_tmp,'%s_resultfile_chunk_%i.tsv.gz' % (gtid,myJob))

    OUT_FH = gzip.open(fn_out_tsv, 'wa')
    OUT = h5py.File(fn_out, 'w')
    OUT.create_dataset(name = 'ciswindow', data = cispos)
    OUT.create_dataset(name = 'tsspos', data = tsspos)
    OUT.create_dataset(name = 'strand', data = strand)
    OUT.create_dataset(name = 'maf', data = maf)
    storeQTL(OUT, lm, pos, gtid, gid, Y.shape[0], 'None', isFirst = True, isLast = True, TXT = OUT_FH, alleles = alleles, tsspos = tsspos, strand = strand, maf = maf)

    #############################################
    ## Run linear mixed model assoc background ##
    #############################################
    X = X.T
    alllbda = []
    for i in xrange(10):
        newidx = sp.random.permutation(X.shape[1])
        Xrand = X[:,newidx]
        lm.setSNPs(sp.array(Xrand.T, order = 'C'))    
        lm.process()
        if i ==0:
            OUT.create_dataset(name = 'prand', data = lm.getPv().ravel())
        pv = lm.getPv().ravel()
        pv = pv[~sp.isnan(pv)]
        osm, osr = spst.probplot(pv, fit = 0, dist = 'uniform')
        lbda = sp.dot(-sp.log10(osm).T, -sp.log10(osr)) / sp.dot(-sp.log10(osm).T, -sp.log10(osm))#sp.dot(osm.T, osr) / sp.dot(osm.T, osm)
        lbda = fdr.estimate_lambda(pv)
        alllbda.append(lbda)
    alllbda = sp.array(alllbda)

    #############################################
    ####### Store results and background ########
    #############################################
    OUT.create_dataset(name = 'lambda_rand', data = alllbda.mean())
    OUT.create_dataset(name = 'lambda_rand_std', data = alllbda.std())
    OUT.create_dataset(name = 'pvrand', data = pv.ravel())
    OUT.close()
    OUT_FH.close()





